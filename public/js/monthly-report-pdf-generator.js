/**
 * ICB Solutions Monthly Report PDF Generator
 * Comprehensive PDF generation engine for Microsoft 365 monthly reports
 * Features: Professional layouts, Chart.js integration, ICB branding, customer logos
 */

class MonthlyReportPDFGenerator {
    constructor() {
        this.pageWidth = 210; // A4 width in mm
        this.pageHeight = 297; // A4 height in mm
        this.margin = 20;
        this.contentWidth = this.pageWidth - (this.margin * 2);
        this.currentY = this.margin;
        this.pdf = null;
        this.customerLogo = null;
        this.icbLogo = '/images/icblogo.jpg';
        
        // Initialize chart service
        this.chartService = new MonthlyReportChartService();
        
        // Color scheme for ICB Solutions branding
        this.colors = {
            primary: '#3e8ab4',     // ICB Navy Blue
            secondary: '#2f6b8a',   // Darker Blue
            accent: '#10b981',      // Success Green
            danger: '#dc2626',      // Alert Red
            warning: '#f59e0b',     // Warning Amber
            text: '#1f2937',        // Dark Gray
            lightText: '#6b7280',   // Light Gray
            background: '#f8fafc'   // Light Background
        };
        
        // Chart configuration
        this.chartDefaults = {
            responsive: false,
            animation: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        usePointStyle: true,
                        padding: 15,
                        font: {
                            size: 11
                        }
                    }
                }
            },
            maintainAspectRatio: false
        };
    }

    /**
     * Generate complete monthly report PDF
     */
    async generateReport(reportData, customerName, customerLogo = null) {
        try {
            console.log('üéØ Starting PDF generation for:', customerName);
            
            // Initialize jsPDF
            this.pdf = new jsPDF('portrait', 'mm', 'a4');
            this.customerLogo = customerLogo;
            
            // Generate report sections
            await this.generateCoverPage(reportData, customerName);
            await this.generateExecutiveSummary(reportData);
            await this.generateSecurityDashboard(reportData);
            await this.generateIdentitySection(reportData);
            await this.generateDeviceSection(reportData);
            await this.generateComplianceSection(reportData);
            await this.generateRecommendations(reportData);
            await this.generateAppendix(reportData);
            
            // Clean up any temporary chart canvases
            this.chartService.cleanup();
            
            // Return PDF blob for download
            const pdfBlob = this.pdf.output('blob');
            console.log('‚úÖ PDF generation completed successfully');
            
            return {
                blob: pdfBlob,
                filename: this.generateFilename(customerName, reportData.metadata?.reportPeriod)
            };
            
        } catch (error) {
            console.error('‚ùå PDF generation failed:', error);
            // Clean up on error
            this.chartService.cleanup();
            throw new Error(`PDF generation failed: ${error.message}`);
        }
    }

    /**
     * Generate professional cover page
     */
    async generateCoverPage(reportData, customerName) {
        console.log('üìÑ Generating cover page...');
        
        // Header with logos
        await this.addHeader(true); // Cover page header
        
        // Report title
        this.currentY = 80;
        this.pdf.setFontSize(28);
        this.pdf.setTextColor(this.colors.primary);
        this.pdf.setFont('helvetica', 'bold');
        this.addCenteredText('Microsoft 365 Security &');
        this.currentY += 12;
        this.addCenteredText('Compliance Report');
        
        // Customer name
        this.currentY += 25;
        this.pdf.setFontSize(20);
        this.pdf.setTextColor(this.colors.text);
        this.pdf.setFont('helvetica', 'normal');
        this.addCenteredText(customerName);
        
        // Report period
        const reportPeriod = this.formatReportPeriod(reportData.metadata?.reportPeriod);
        this.currentY += 15;
        this.pdf.setFontSize(16);
        this.pdf.setTextColor(this.colors.lightText);
        this.addCenteredText(reportPeriod);
        
        // Executive summary box
        this.currentY += 30;
        await this.addExecutiveSummaryBox(reportData.executiveSummary);
        
        // Generated by ICB Solutions
        this.currentY = this.pageHeight - 60;
        this.pdf.setFontSize(12);
        this.pdf.setTextColor(this.colors.primary);
        this.pdf.setFont('helvetica', 'bold');
        this.addCenteredText('Generated by ICB Solutions Managed Services');
        
        this.currentY += 8;
        this.pdf.setFontSize(10);
        this.pdf.setTextColor(this.colors.lightText);
        this.pdf.setFont('helvetica', 'normal');
        this.addCenteredText(`Report generated on ${new Date().toLocaleDateString()}`);
        
        // Footer
        this.addFooter();
    }

    /**
     * Generate executive summary with key metrics
     */
    async generateExecutiveSummary(reportData) {
        this.addNewPage();
        console.log('üìä Generating executive summary...');
        
        await this.addHeader();
        this.addSectionTitle('Executive Summary');
        
        // Key metrics grid
        await this.addMetricsGrid(reportData.executiveSummary);
        
        // Security score chart
        this.currentY += 15;
        await this.addSecurityScoreChart(reportData);
        
        // Compliance overview
        this.currentY += 10;
        await this.addComplianceOverview(reportData);
        
        this.addFooter();
    }

    /**
     * Generate security dashboard with charts
     */
    async generateSecurityDashboard(reportData) {
        this.addNewPage();
        console.log('üõ°Ô∏è Generating security dashboard...');
        
        await this.addHeader();
        this.addSectionTitle('Security Dashboard');
        
        // Threat protection status
        await this.addThreatProtectionChart(reportData.securityData);
        
        // Security alerts timeline
        this.currentY += 10;
        await this.addSecurityAlertsChart(reportData.securityData);
        
        this.addFooter();
    }

    /**
     * Generate identity security section
     */
    async generateIdentitySection(reportData) {
        this.addNewPage();
        console.log('üîê Generating identity section...');
        
        await this.addHeader();
        this.addSectionTitle('Identity Security & Zero Trust');
        
        // User analytics
        await this.addUserAnalyticsChart(reportData.identityData);
        
        // MFA adoption
        this.currentY += 10;
        await this.addMFAAdoptionChart(reportData.identityData);
        
        // Risk users table
        this.currentY += 15;
        this.addRiskUsersTable(reportData.identityData);
        
        this.addFooter();
    }

    /**
     * Generate device management section
     */
    async generateDeviceSection(reportData) {
        this.addNewPage();
        console.log('üì± Generating device section...');
        
        await this.addHeader();
        this.addSectionTitle('Device Management & Compliance');
        
        // Device compliance chart
        await this.addDeviceComplianceChart(reportData.deviceData);
        
        // Device types distribution
        this.currentY += 10;
        await this.addDeviceTypesChart(reportData.deviceData);
        
        this.addFooter();
    }

    /**
     * Generate compliance section
     */
    async generateComplianceSection(reportData) {
        this.addNewPage();
        console.log('üìã Generating compliance section...');
        
        await this.addHeader();
        this.addSectionTitle('Data Protection & Compliance');
        
        // DLP policies status
        await this.addDLPPoliciesChart(reportData.complianceData);
        
        // Retention policies
        this.currentY += 10;
        await this.addRetentionPoliciesTable(reportData.complianceData);
        
        this.addFooter();
    }

    /**
     * Generate recommendations section
     */
    async generateRecommendations(reportData) {
        this.addNewPage();
        console.log('üéØ Generating recommendations...');
        
        await this.addHeader();
        this.addSectionTitle('AI-Generated Recommendations');
        
        // Priority recommendations
        this.addRecommendationsList(reportData.recommendations);
        
        this.addFooter();
    }

    /**
     * Generate appendix with technical details
     */
    async generateAppendix(reportData) {
        this.addNewPage();
        console.log('üìã Generating appendix...');
        
        await this.addHeader();
        this.addSectionTitle('Technical Appendix');
        
        // Data collection summary
        this.addDataCollectionSummary(reportData.metadata);
        
        // Methodology
        this.currentY += 15;
        this.addMethodology();
        
        this.addFooter();
    }

    /**
     * Add professional header with logos
     */
    async addHeader(isCoverPage = false) {
        const headerHeight = 25;
        
        // ICB Solutions logo (left)
        try {
            if (!isCoverPage) {
                this.pdf.addImage(this.icbLogo, 'JPEG', this.margin, 10, 30, 12);
            }
        } catch (error) {
            console.warn('Could not load ICB logo:', error);
        }
        
        // Customer logo (right)
        if (this.customerLogo && !isCoverPage) {
            try {
                this.pdf.addImage(this.customerLogo, 'PNG', this.pageWidth - this.margin - 30, 10, 30, 12);
            } catch (error) {
                console.warn('Could not load customer logo:', error);
            }
        }
        
        // Header line
        if (!isCoverPage) {
            this.pdf.setDrawColor(this.colors.primary);
            this.pdf.setLineWidth(0.5);
            this.pdf.line(this.margin, headerHeight, this.pageWidth - this.margin, headerHeight);
        }
        
        this.currentY = headerHeight + 10;
    }

    /**
     * Add footer with page numbers and branding
     */
    addFooter() {
        const footerY = this.pageHeight - 15;
        
        // Footer line
        this.pdf.setDrawColor(this.colors.primary);
        this.pdf.setLineWidth(0.5);
        this.pdf.line(this.margin, footerY - 5, this.pageWidth - this.margin, footerY - 5);
        
        // Page number
        this.pdf.setFontSize(10);
        this.pdf.setTextColor(this.colors.lightText);
        this.pdf.setFont('helvetica', 'normal');
        const pageText = `Page ${this.pdf.internal.getNumberOfPages()}`;
        this.pdf.text(pageText, this.pageWidth - this.margin, footerY, { align: 'right' });
        
        // ICB Solutions branding
        this.pdf.text('ICB Solutions Managed Services', this.margin, footerY);
    }

    /**
     * Add section title
     */
    addSectionTitle(title) {
        this.pdf.setFontSize(18);
        this.pdf.setTextColor(this.colors.primary);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text(title, this.margin, this.currentY);
        
        // Underline
        const textWidth = this.pdf.getTextWidth(title);
        this.pdf.setDrawColor(this.colors.primary);
        this.pdf.setLineWidth(0.5);
        this.pdf.line(this.margin, this.currentY + 2, this.margin + textWidth, this.currentY + 2);
        
        this.currentY += 15;
    }

    /**
     * Add centered text
     */
    addCenteredText(text) {
        const textWidth = this.pdf.getTextWidth(text);
        const x = (this.pageWidth - textWidth) / 2;
        this.pdf.text(text, x, this.currentY);
    }

    /**
     * Add new page and reset position
     */
    addNewPage() {
        this.pdf.addPage();
        this.currentY = this.margin;
    }

    /**
     * Generate filename for the PDF
     */
    generateFilename(customerName, reportPeriod) {
        const sanitizedName = customerName.replace(/[^a-zA-Z0-9]/g, '_');
        const date = reportPeriod?.startDate ? 
            new Date(reportPeriod.startDate).toISOString().slice(0, 7) : 
            new Date().toISOString().slice(0, 7);
        
        return `${sanitizedName}_Monthly_Report_${date}.pdf`;
    }

    /**
     * Format report period for display
     */
    formatReportPeriod(reportPeriod) {
        if (!reportPeriod?.startDate) {
            const lastMonth = new Date();
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            return lastMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
        }
        
        const startDate = new Date(reportPeriod.startDate);
        return startDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    }

    // Additional helper methods for charts and tables will be implemented
    // in the next phase of development...

    /**
     * Add executive summary box with key metrics
     */
    async addExecutiveSummaryBox(executiveSummary) {
        const boxHeight = 60;
        const boxY = this.currentY;
        
        // Background box
        this.pdf.setFillColor(this.colors.background);
        this.pdf.rect(this.margin, boxY, this.contentWidth, boxHeight, 'F');
        
        // Border
        this.pdf.setDrawColor(this.colors.primary);
        this.pdf.setLineWidth(1);
        this.pdf.rect(this.margin, boxY, this.contentWidth, boxHeight, 'S');
        
        // Content
        this.currentY = boxY + 15;
        this.pdf.setFontSize(14);
        this.pdf.setTextColor(this.colors.text);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text('Key Findings:', this.margin + 10, this.currentY);
        
        this.currentY += 10;
        this.pdf.setFontSize(11);
        this.pdf.setFont('helvetica', 'normal');
        
        const metrics = [
            `Security Score: ${executiveSummary?.securityScore || 'N/A'}`,
            `Total Users: ${executiveSummary?.totalUsers || 'N/A'}`,
            `Device Compliance: ${executiveSummary?.complianceRate || 'N/A'}`,
            `Critical Alerts: ${executiveSummary?.criticalAlerts || 'N/A'}`
        ];
        
        metrics.forEach((metric, index) => {
            const x = this.margin + 10 + (index % 2) * (this.contentWidth / 2);
            const y = this.currentY + Math.floor(index / 2) * 8;
            this.pdf.text(`‚Ä¢ ${metric}`, x, y);
        });
        
        this.currentY = boxY + boxHeight + 10;
    }

    /**
     * Add metrics grid with visual indicators
     */
    async addMetricsGrid(executiveSummary) {
        // Implementation for metrics grid layout
        // This will be expanded in the next development phase
    }

    /**
     * Real chart implementations using Chart.js
     */
    async addSecurityScoreChart(reportData) {
        console.log('üìä Generating security score chart...');
        const chartImage = await this.chartService.generateSecurityScoreChart(reportData.securityData);
        await this.addChartImage('Security Score Trend', chartImage, 60);
    }

    async addComplianceOverview(reportData) {
        console.log('üìä Generating compliance overview chart...');
        const chartImage = await this.chartService.generateComplianceChart(reportData.complianceData);
        await this.addChartImage('Compliance Overview', chartImage, 50);
    }

    async addThreatProtectionChart(securityData) {
        console.log('üìä Generating threat protection chart...');
        const chartImage = await this.chartService.generateThreatProtectionChart(securityData);
        await this.addChartImage('Threat Protection Status', chartImage, 70);
    }

    async addSecurityAlertsChart(securityData) {
        console.log('üìä Generating security alerts chart...');
        const chartImage = await this.chartService.generateSecurityAlertsChart(securityData);
        await this.addChartImage('Security Alerts Timeline', chartImage, 60);
    }

    async addUserAnalyticsChart(identityData) {
        console.log('üìä Generating user analytics chart...');
        const chartImage = await this.chartService.generateUserActivityChart(identityData);
        await this.addChartImage('User Analytics', chartImage, 60);
    }

    async addMFAAdoptionChart(identityData) {
        console.log('üìä Generating MFA adoption chart...');
        const chartImage = await this.chartService.generateMFAChart(identityData);
        await this.addChartImage('MFA Adoption Rate', chartImage, 50);
    }

    async addDeviceComplianceChart(deviceData) {
        console.log('üìä Generating device compliance chart...');
        const chartImage = await this.chartService.generateComplianceChart(deviceData);
        await this.addChartImage('Device Compliance Status', chartImage, 60);
    }

    async addDeviceTypesChart(deviceData) {
        console.log('üìä Generating device types chart...');
        const chartImage = await this.chartService.generateDeviceTypesChart(deviceData);
        await this.addChartImage('Device Types Distribution', chartImage, 50);
    }

    async addDLPPoliciesChart(complianceData) {
        console.log('üìä Generating DLP policies chart...');
        const chartImage = await this.chartService.generateComplianceChart(complianceData);
        await this.addChartImage('DLP Policies Status', chartImage, 60);
    }

    /**
     * Add chart image to PDF
     */
    async addChartImage(title, chartImageData, height) {
        try {
            // Chart title
            this.pdf.setFontSize(12);
            this.pdf.setTextColor(this.colors.text);
            this.pdf.setFont('helvetica', 'bold');
            this.pdf.text(title, this.margin, this.currentY);
            
            this.currentY += 8;
            
            // Add chart image
            this.pdf.addImage(chartImageData, 'PNG', this.margin, this.currentY, this.contentWidth, height);
            
            this.currentY += height + 5;
        } catch (error) {
            console.warn(`Failed to add chart ${title}:`, error);
            // Fall back to placeholder
            this.addChartPlaceholder(title, height);
        }
    }

    /**
     * Add chart placeholder (will be replaced with actual Chart.js implementation)
     */
    addChartPlaceholder(title, height) {
        // Chart title
        this.pdf.setFontSize(12);
        this.pdf.setTextColor(this.colors.text);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text(title, this.margin, this.currentY);
        
        this.currentY += 8;
        
        // Chart placeholder box
        this.pdf.setFillColor(240, 240, 240);
        this.pdf.rect(this.margin, this.currentY, this.contentWidth, height, 'F');
        
        this.pdf.setDrawColor(200, 200, 200);
        this.pdf.rect(this.margin, this.currentY, this.contentWidth, height, 'S');
        
        // Placeholder text
        this.pdf.setFontSize(10);
        this.pdf.setTextColor(this.colors.lightText);
        this.pdf.setFont('helvetica', 'normal');
        const placeholderText = `[${title} Chart - Implementation in Progress]`;
        const textWidth = this.pdf.getTextWidth(placeholderText);
        const textX = this.margin + (this.contentWidth - textWidth) / 2;
        const textY = this.currentY + height / 2;
        this.pdf.text(placeholderText, textX, textY);
        
        this.currentY += height + 5;
    }

    /**
     * Add risk users table
     */
    addRiskUsersTable(identityData) {
        this.addTablePlaceholder('High-Risk Users Summary', 40);
    }

    /**
     * Add retention policies table
     */
    async addRetentionPoliciesTable(complianceData) {
        this.addTablePlaceholder('Retention Policies Status', 50);
    }

    /**
     * Add table placeholder
     */
    addTablePlaceholder(title, height) {
        // Table title
        this.pdf.setFontSize(12);
        this.pdf.setTextColor(this.colors.text);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text(title, this.margin, this.currentY);
        
        this.currentY += 8;
        
        // Table placeholder
        this.pdf.setFillColor(250, 250, 250);
        this.pdf.rect(this.margin, this.currentY, this.contentWidth, height, 'F');
        
        this.pdf.setDrawColor(200, 200, 200);
        this.pdf.rect(this.margin, this.currentY, this.contentWidth, height, 'S');
        
        // Header row
        this.pdf.setFillColor(this.colors.primary);
        this.pdf.rect(this.margin, this.currentY, this.contentWidth, 8, 'F');
        
        this.pdf.setFontSize(9);
        this.pdf.setTextColor(255, 255, 255);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text(title + ' - Data Table', this.margin + 5, this.currentY + 5);
        
        this.currentY += height + 5;
    }

    /**
     * Add recommendations list
     */
    addRecommendationsList(recommendations) {
        if (!recommendations || recommendations.length === 0) {
            this.pdf.setFontSize(11);
            this.pdf.setTextColor(this.colors.lightText);
            this.pdf.text('No specific recommendations generated for this reporting period.', this.margin, this.currentY);
            return;
        }

        recommendations.forEach((rec, index) => {
            if (this.currentY > this.pageHeight - 40) {
                this.addNewPage();
                this.addHeader();
            }

            // Priority indicator
            const priorityColors = {
                'critical': this.colors.danger,
                'high': this.colors.warning,
                'medium': this.colors.primary,
                'low': this.colors.lightText,
                'info': this.colors.lightText
            };

            const priority = rec.priority || 'info';
            const priorityColor = priorityColors[priority] || this.colors.lightText;

            // Priority badge
            this.pdf.setFillColor(priorityColor);
            this.pdf.rect(this.margin, this.currentY - 3, 30, 6, 'F');
            
            this.pdf.setFontSize(8);
            this.pdf.setTextColor(255, 255, 255);
            this.pdf.setFont('helvetica', 'bold');
            this.pdf.text(priority.toUpperCase(), this.margin + 2, this.currentY + 1);

            // Recommendation text
            this.pdf.setFontSize(10);
            this.pdf.setTextColor(this.colors.text);
            this.pdf.setFont('helvetica', 'normal');
            
            const recText = rec.title ? `${rec.title}: ${rec.description}` : rec.text || rec;
            const lines = this.pdf.splitTextToSize(recText, this.contentWidth - 35);
            
            this.pdf.text(lines, this.margin + 35, this.currentY);
            this.currentY += (lines.length * 4) + 8;
        });
    }

    /**
     * Add data collection summary
     */
    addDataCollectionSummary(metadata) {
        if (!metadata) return;

        this.pdf.setFontSize(12);
        this.pdf.setTextColor(this.colors.text);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text('Data Collection Summary', this.margin, this.currentY);
        
        this.currentY += 10;
        
        this.pdf.setFontSize(10);
        this.pdf.setFont('helvetica', 'normal');
        
        const summaryItems = [
            `Report Generation Date: ${new Date(metadata.generatedAt).toLocaleString()}`,
            `Data Collection Duration: ${Math.round(metadata.collectionDuration / 1000)}s`,
            `Tenant Domain: ${metadata.tenantInfo?.domain || 'Unknown'}`,
            `Data Sources Collected: ${metadata.dataSourcesCollected || 'N/A'}`,
            `Report Period: ${this.formatReportPeriod(metadata.reportPeriod)}`
        ];

        summaryItems.forEach(item => {
            this.pdf.text(`‚Ä¢ ${item}`, this.margin + 5, this.currentY);
            this.currentY += 6;
        });
    }

    /**
     * Add methodology section
     */
    addMethodology() {
        this.pdf.setFontSize(12);
        this.pdf.setTextColor(this.colors.text);
        this.pdf.setFont('helvetica', 'bold');
        this.pdf.text('Methodology & Data Sources', this.margin, this.currentY);
        
        this.currentY += 10;
        
        this.pdf.setFontSize(9);
        this.pdf.setFont('helvetica', 'normal');
        
        const methodologyText = `This report was generated using data collected from Microsoft Graph API endpoints, including Microsoft 365 Security Center, Azure Active Directory, Microsoft Intune, and Microsoft Purview. All metrics are calculated based on the latest available data from your tenant at the time of report generation. Security scores and compliance ratings are provided by Microsoft's native reporting systems.`;
        
        const lines = this.pdf.splitTextToSize(methodologyText, this.contentWidth);
        this.pdf.text(lines, this.margin, this.currentY);
    }
}

// Make the class globally available
window.MonthlyReportPDFGenerator = MonthlyReportPDFGenerator;